services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-story_generator}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-story_generator}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  # Django Backend
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: development
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - .:/app
      - media_data:/app/media
      - logs_data:/app/logs
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - DB_HOST=postgres
      - DB_NAME=${DB_NAME:-story_generator}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - STABILITY_API_KEY=${STABILITY_API_KEY}
      - GOOGLE_SPEECH_API_KEY=${GOOGLE_SPEECH_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
      - frontend-network
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:${BACKEND_PORT:-8000}
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    networks:
      - frontend-network
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - media_data:/var/www/media:ro
      - ./static:/var/www/static:ro
    networks:
      - frontend-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_data:
    driver: local
  logs_data:
    driver: local

# Development services (use with profiles)
services_dev:
  # PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGLADMIN_EMAIL:-admin@example.com}
      PGLADMIN_DEFAULT_PASSWORD: ${PGLADMIN_PASSWORD:-adminpass}
    volumes:
      - pgadmin_data:/var/lib/pgladmin
    networks:
      - backend-network
    depends_on:
      - postgres
    profiles:
      - development

additional_volumes:
  pgadmin_data:
    driver: local
